buildscript {
    ext {
        springBootVersion = '2.3.3.RELEASE'
        mapstructVersion = "1.4.2.Final"
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "idea"
    id "org.asciidoctor.convert" version "2.4.0"
    id "org.flywaydb.flyway" version "7.0.3"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctor
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

tasks.whenTaskAdded { task ->
    if(task.name.equals("lint")) {
        task.enabled = false
    }
}

sourceCompatibility = '11'

dependencies {
    /**
     * Spring Boot Dependencies
     */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile group: 'org.hibernate', name: 'hibernate-spatial', version: '5.4.20.Final'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // Yaml Resource Resolver
    implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'

    /**
     * QueryDSL
     */
    implementation 'com.querydsl:querydsl-jpa'

    /**
     * MapStruct
     */
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    /**
     * Lombok
     */
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    /**
     * Database Dependencies
     */
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'
    compile "org.flywaydb:flyway-core"

    /**
     * JWT Dependencies
     */
    compile 'io.jsonwebtoken:jjwt-api:0.11.1'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.1', 'io.jsonwebtoken:jjwt-jackson:0.11.1'

    /**
     * Test Dependencies
     */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation('org.mockito:mockito-inline:3.4.0')
    testImplementation('org.mockito:mockito-core:3.4.0')
    testImplementation('org.mockito:mockito-junit-jupiter:3.4.0')

    /**
     * RestDocs
     */
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}

/*************************
 * Query DSL
 *************************/
def querydslDir = "src/main/generated"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

/*************************
 * Rest Docs
 *************************/
asciidoctor {
    dependsOn test
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

/*************************
 * Flyway
 *************************/
flyway {
//    schemas = ['apjung']
    baselineVersion = 0
    encoding = 'UTF-8'
    validateOnMigrate = true
    baselineOnMigrate = true
    locations = ["filesystem:${file('src/main/resources/db/migration').absolutePath}"]
}
